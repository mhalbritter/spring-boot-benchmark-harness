#!/usr/bin/ruby

ITERATIONS = 50
SLEEP = false
REGEX = %r{.*Uptime:\ ([0-9.]+) ms.*}

require 'tmpdir'

def fat_jar(baseline_jar, new_jar)
  benchmark("Fat jar", "java -jar #{baseline_jar}", "java -jar #{new_jar}")
end

def main_method(baseline_jar, new_jar)
  Dir.mktmpdir do |baseline_dir|
    Dir.mktmpdir do |new_dir|
      benchmark("Main method", get_main_method_command(baseline_jar, baseline_dir), get_main_method_command(new_jar, new_dir))
    end
  end
end

def get_main_method_command(jar, dir)
  `unzip #{jar} -d #{dir}`
  jars = Dir.glob(File.join(dir, "**", "*.jar")).join(":")
  return "java -classpath #{dir}/BOOT-INF/classes:#{jars} #{find_main_class(dir)}"
end

def find_main_class(dir)
  prefix = "Start-Class: "
  File.readlines(File.join(dir, "META-INF", "MANIFEST.MF")).each do |line|
    if line.start_with?(prefix) then
      return line[prefix.length..-1].strip
    end
  end
end

def benchmark(title, baseline_command, new_command)
  baseline_results = Array.new
  new_results = Array.new  
  puts "#{title}:"
  puts
  puts "|        | Baseline |  New  |"
  puts "| ------ | -------: | ----: |"
  baseline_first = true
  for i in 1..ITERATIONS do
    if baseline_first
      baseline_result = execute(baseline_command)      
      new_result = execute(new_command)      
    else 
      new_result = execute(new_command)
      baseline_result = execute(baseline_command)                
    end    
    baseline_results << baseline_result
    new_results << new_result
    puts "|        | #{"   %0.3f" % baseline_result} | #{"%0.3f" % new_result} |"
    baseline_first = !baseline_first
  end
  puts "|    Min |    #{"%0.3f" % min(baseline_results)} | #{"%0.3f" % min(new_results)} |"
  puts "|    Max |    #{"%0.3f" % max(baseline_results)} | #{"%0.3f" % max(new_results)} |"
  puts "|   Mean |    #{"%0.3f" % mean(baseline_results)} | #{"%0.3f" % mean(new_results)} |"
  puts "|  Range |    #{"%0.3f" % range(baseline_results)} | #{"%0.3f" % range(new_results)} |"
  puts "| Stddev |    #{"%0.3f" % standard_deviation(baseline_results)} | #{"%0.3f" % standard_deviation(new_results)} |"
end

def standard_deviation(results)
  mean = results.sum(0.0) / results.size
  sum = results.sum(0.0) { |element| (element - mean) ** 2 }
  variance = sum / (results.size - 1)
  return Math.sqrt(variance)
end

def min(results)
  return results.min
end

def max(results)
  return results.max
end

def mean(results)
  return results.sum(0.0) / results.size
end

def range(results)
  return results.max - results.min
end

def execute(command)  
  if SLEEP
	sleep 2
  end
  output = `#{command}`
  if matches = output.match(REGEX)
	return matches[1].to_f
  else
    puts "Did not find running time in #{output}"
    exit 1
  end
end

mode = ARGV[2]

if mode then
  if self.respond_to?(mode, true) then
    self.send(mode, ARGV[0], ARGV[1])
  else
    puts "Unknown mode #{mode}"
    exit 1
  end
else
  fat_jar(ARGV[0], ARGV[1])
  main_method(ARGV[0], ARGV[1])
end
